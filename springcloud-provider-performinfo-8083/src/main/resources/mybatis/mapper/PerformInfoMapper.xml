<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.atzelei.wechatmai2.dao.PerformInfoMapper">

  <resultMap id="BaseResultMap" type="perinfo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="perfortype" jdbcType="INTEGER" property="perfortype" />
    <result column="performstar" jdbcType="VARCHAR" property="performstar" />
    <result column="performpice" jdbcType="INTEGER" property="performpice" />
    <result column="performshows" jdbcType="VARCHAR" property="performshows" />
    <result column="performplace" jdbcType="VARCHAR" property="performplace" />
    <result column="performstarttime" jdbcType="TIMESTAMP" property="performstarttime" />
    <result column="performendtime" jdbcType="TIMESTAMP" property="performendtime" />
    <result column="performheat" jdbcType="INTEGER" property="performheat" />
    <result column="performposters" jdbcType="VARCHAR" property="performposters" />
    <result column="performdiscount" jdbcType="REAL" property="performdiscount" />
    <result column="isDelete" jdbcType="TINYINT" property="isdelete" />
  </resultMap>

<!--  #占位符的特点
MyBatis处理 #{ } 占位符，使用的 JDBC 对象是 PreparedStatement 对象，执行sql语句的效率更高。
使用 PreparedStatement 对象，能够避免 sql 注入，使得sql语句的执行更加安全。
#{ } 常常作为列值使用，位于sql语句中等号的右侧；#{ } 位置的值与数据类型是相关的。
-->

<!--  MyBatis处理 ${ } 占位符，使用的 JDBC 对象是 Statement 对象，执行sql语句的效率相对于 #{ } 占位符要更低。
${ } 占位符的值，使用的是字符串连接的方式，有 sql 注入的风险，同时也存在代码安全的问题。
${ } 占位符中的数据是原模原样的，不会区分数据类型。
${ } 占位符常用作表名或列名，这里推荐在能保证数据安全的情况下使用 ${ }。
-->


<!--  以下属性是必须的：
l maxElementsInMemory - 在内存中缓存的element的最大数目
l maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大
l eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断
l overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上

以下属性是可选的：
l timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大
l timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大
 diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.
l diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。
l diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作
l memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）
-->

  <select id="byMatchGetInfo" parameterType="string" resultType="perinfo">
    select * from performinfo where performinfo.title like concat('%',#{matchStr},'%')
    or performinfo.performstar like concat('%',#{matchStr},'%')
    or performinfo.performplace like concat('%',#{matchStr},'%');
  </select>

<!--  分页查询-->
  <select id="getPerformInfoLimit" parameterType="map" resultType="perinfo">
    select * from performinfo limit #{startIndex}, #{pageSize}
  </select>

  <!--  分页查询-->
  <select id="getUserByRowBounds" parameterType="map" resultType="perinfo">
    select * from performinfo limit #{startIndex}, #{pageSize}
  </select>

  <insert id="addPerformInfo" parameterType="perinfoRequest" useGeneratedKeys="true">
    insert into performinfo(title, perfortype, performstar, performpice, performshows, performplace, performstarttime, performendtime, performposters, performdiscount)
    values (#{title}, #{perfortype}, #{performstar}, #{performpice}, #{performshows}, #{performplace}, #{performstarttime}, #{performendtime}, #{performposters}, #{performdiscount})
  </insert>



</mapper>